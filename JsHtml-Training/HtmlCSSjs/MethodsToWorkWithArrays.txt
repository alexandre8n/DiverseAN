https://www.w3schools.com/jsref/jsref_obj_array.asp

forEach
var ar = [1,2,3,4,5];
ar.forEach((v, index, ar) => {console.log(`value:${v}, index:${index}`)});

var ar = [1,2,3,4,5];
var arOfQuadrats = ar.map((v, index, ar) => {console.log(`value:${v}, index:${index}`);
	return {idx: index, val: v};
});


reduce
const array1 = [1, 2, 3, 4];

// 0 + 1 + 2 + 3 + 4
const initialValue = 0;
const sumWithInitial = array1.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue
);

console.log(sumWithInitial);
// expected output: 10

find
find() returns the value of the first element in an array that passes a test (provided by a function):
20
const ages = [3, 10, 18, 20];

document.getElementById("demo").innerHTML = ages.find(checkAge);

function checkAge(age) {
  return age > 18;
}

findIndex
w3schools.com/jsref/jsref_findindex.asp
array.findIndex(function(currentValue, index, arr), thisValue)
method executes a function for each array element.
 returns the index (position) of the first element that passes a test.
or -1 if none

filter
const ages = [32, 33, 16, 40];
const result = ages.filter(checkAdult);

function checkAdult(age) {
  return age >= 18;
}

push
add an element

unshift
method adds new elements to the beginning of an array. overwrites the array.
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.unshift("Lemon","Pineapple");

pop
Remove (pop) the last element:

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.pop();


shift
Shift (remove) the first element of the array:
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.shift();

fill
The fill() method fills specified elements in an array with a value.
The fill() method overwrites the original array.
Start and end position can be specified. If not, all elements will be filled.
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.fill("Kiwi");
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.fill("Kiwi", 2, 4);

concat
concat() method concatenates (joins) two or more arrays.
const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const children = arr1.concat(arr2);

const arr1 = ["Cecilie", "Lone"];
const arr2 = ["Emil", "Tobias", "Linus"];
const arr3 = ["Robin"];
const children = arr1.concat(arr2, arr3);


join + split
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let text = fruits.join(" and ");
method returns an array as a string.
Any separator can be specified. The default is comma (,).
array.join(separator)

sort
const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.sort();
array.sort(compareFunction)
const nums = [1, 10, 20, 3, 2]
nums.sort((a,b)=>a-b); // ascending


isArray

splice
method adds and/or removes array elements.overwrites the original array.
array.splice(index, howmany, item1, ....., itemX)

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 2); //"Banana", "Orange"

const fruits = ["Banana", "Orange", "Apple", "Mango"];
fruits.splice(2, 0, "Lemon", "Kiwi"); //Banana,Orange,Lemon,Kiwi,Apple,Mango


slice
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const citrus = fruits.slice(1, 3);
const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
const myBest = fruits.slice(-3, -1); // "Lemon", "Apple"
(3, -1) -> apple


indexOf
const fruits = ["Banana", "Orange", "Apple", "Mango"];
let index = fruits.indexOf("Apple");
/
Start at index 3:
const fruits = ["Banana", "Orange", "Apple", "Mango", "Apple"];
let index = fruits.indexOf("Apple", 3); //4

lastIndexOf
array.lastIndexOf(item, start)
const fruits = ["Apple", "Orange", "Apple", "Mango"];
let index = fruits.lastIndexOf("Apple"); //2
const fruits = ["Orange","Apple","Mango","Apple","Banana","Apple"];
let index = fruits.lastIndexOf("Apple", -4); //1


includes

reverse

copyWithin
array.copyWithin(target, start, end)

// get the sum of array using eval
array=[1,2,3];
console.log(eval(array.join("+"));
// max value
var max = Math.max(...array);
max=Math.max.apply(null, array);

array.sort((x1,x2)=> x1-x2);

// for comapring strings, one can use x1.localecomapare(x2)...

// reverse array without using reverse method
arr = [...array].map([].pop, array);
var arr2 = [7, "correct", 0, false, "", NaN];//get non-falsy
const nonFalsy=arr2.fiter(n=>!!n);

